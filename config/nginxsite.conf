## This file is part of the book Meteor in Action
## http://www.meteorinaction.com
## http://github.com/meteorinaction

## Sample site configuration to use nginx as a load balancer for Meteor applications
## Make sure you use nginx 1.4 or later to take advantage of WebSocket support

# configure backend Meteor servers
# one line per instance
upstream meteor_server {
    # additional health checks for each instance
    # do not send requests to a backend server if they failed to respond 3 times in a row
    # define fail as no request for 30s
    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s; #locally running Meteor on port 3000
    server 192.168.2.202:3000 max_fails=3 fail_timeout=30s weight=2; # second backend server receives twice the requests as the first server
    ip_hash; # send the same IP always to the same backend server
}

## redirect all non-www requests to the www subdomain
## Also redirect non-ssl to ssl, remove the server block if you do not use SSL
server {
    listen 80;
    server_name meteorinaction.com www.meteorinaction.com;
    if ($host = 'meteorinaction.com') {
        return 301 https://www.$host$request_uri;
    }
}

## actual site configuration
server {
    server_name www.meteorinaction.com meteorinaction.com;
    #listen 80 spdy; #uncomment this line if you do not use SSL
    if ($host = 'meteorinaction.com') {
        return 301 $scheme://www.$host$request_uri;
    }
    # delete the following SSL block if you do not need https
    listen 443 ssl spdy;
    ssl_certificate /etc/nginx/crt/meteorinaction.crt;
    ssl_certificate_key /etc/nginx/crt/meteorinaction.server.key;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:DES-CBC3-SHA:!ADH:!AECDH:!MD5;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/crt/meteorinaction.crt;
    resolver 8.8.8.8 8.8.4.4;
    # end of SSL block

    ## performance boost using gzip
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    # end of GZIP block
  
    ## this is the actual load balancing to the meteor backend servers
    location / {
        proxy_pass http://meteor_server; # the name used in upstreams, substituted for any of the defined instances
        proxy_redirect off;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        # Make sure to use WebSockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    ## if nginx has access to the js and css files created by meteor, you can proxy these as well
    #location ~* "^/[a-z0-9]{40}\.(css|js)$" {
    #    root /home/meteor/app/programs/web.browser; # where to find the meteor created files
    #    access_log off;
    #    expires 30d;
    #    add_header Pragma public;
    #    add_header Cache-Control "public";
    #}
  
    ## serve static files by nginx instead of Meteor (the public/ folder)
    location ~ \.(jpg|jpeg|png|gif|mp3|ico|pdf) {
        root /home/meteor/app/programs/web.browser/app; # this should point at the content from the public folder
        access_log off;
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
    }

}
